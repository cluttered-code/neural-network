apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'

sourceCompatibility = JavaVersion.VERSION_1_8

project.ext.versions = [
    gradle:     '2.2.1',
    log4j2:     '2.1',
    slf4j:      '1.7.9',
    jmockit:    '1.14',
    junit:      '4.12',
    jacoco:     '0.7.2.201409121644'
]

jacoco {
    toolVersion = versions.jacoco
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.slf4j:slf4j-api:${versions.slf4j}"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j2}"
    compile "org.apache.logging.log4j:log4j-api:${versions.log4j2}"
    compile "org.apache.logging.log4j:log4j-core:${versions.log4j2}"

    testCompile "org.jmockit:jmockit:${versions.jmockit}"
    testCompile "junit:junit:${versions.junit}"
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs, subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs, subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output, subprojects.sourceSets.main.output)
    executionData = files(jacocoTestReport.executionData, subprojects.jacocoTestReport.executionData)

    onlyIf = {
        true
    }

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = versions.gradle
}

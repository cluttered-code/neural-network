/*
 * Copyright Â© 2015 David Clutter
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.jfrog.bintray' version '1.0'
    id 'com.jfrog.artifactory' version '3.0.1'
    id 'com.github.kt3k.coveralls' version '2.0.1'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

sourceCompatibility = JavaVersion.VERSION_1_8

project.ext.versions = [
        gradle: '2.7',
        jacoco: '0.7.5.201505241946'
]

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

jacoco {
    toolVersion = versions.jacoco
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'

    testCompile 'org.slf4j:slf4j-simple:1.7.12'
    testCompile 'org.jmockit:jmockit:1.19'
    testCompile 'junit:junit:4.12'
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = tasks.withType(Test)
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs, subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs, subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output, subprojects.sourceSets.main.output)
    executionData = files(jacocoTestReport.executionData, subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true // needed by coveralls
    }

    onlyIf = {
        true
    }

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

coveralls {
    sourceDirs = files(sourceSets.main.allSource.srcDirs, subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//task javadoc(type: Javadoc) {
//    source = sourceSets.main.allJava
//    //destinationDir = reporting.file("javadocs")
//}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.clutteredcode'
            artifactId 'neural-network'
            version currentVersion

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Neural Network')
                root.appendNode('description', 'A Neural Network base on a Genetic Algorithm.')
                root.appendNode('url', 'https://github.com/cluttered-code/neural-network')

                def licenses = root.appendNode('licenses')
                def license = licenses.appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def developer = developers.appendNode('developer')
                developer.appendNode('id', 'cluttered-code')
                developer.appendNode('name', 'David Clutter')
                developer.appendNode('email', 'cluttered.code@gmail.com')
            }

            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = versions.gradle
}